*** Settings ***
Resource	C:/Ath.Git/AdaptiveTelehealth/ATH-Resources/Flows/CommonPage_res.txt


**** Keywords ****

TherapistRole.Verify Settings Page Displayed
	ath check label 	Settings
	ath check links displayed	Account Settings
	ath check label 	Account Information
	ath verify element is visible 	//*[@id="therapistInfo"]


ClientRole.Verify Settings Page Displayed
	ath check label 	Settings
	ath verify element is visible	//div[@id='system_preferences']
	ath check links displayed 	Timezone
	ath check links displayed 	Password

TherapistRole.Verify Client Consent Form Page Displayed
	Check Label Existence	Client Informed Consent Form,Informed Consent Form Title,Informed Consent Form Body
	ath check button existence 	Preview Consent Form
	ath check button existence 	Save
	Capture Page Screenshot

Settings.CS.Verify Invite Users Page Displayed
	ath check label 	Invite Users
	ath check button existence 	Invite a new Guest
	ath check button existence 	Invite Client
	Capture Page Screenshot

Settings.CS.Click Schedule OnOff SubMenu
	Run Keyword if	"${TestEnv}" == "Secure"	ath click link 	xpath=(//*[text()="Groups Company Settings"]/following::ul/descendant::a[contains(text(),'Schedule')])[1]	ELSE 	ath click link 	xpath=(//*[text()="Client Settings"]/following::ul/descendant::a[contains(text(),'Schedule')])[1]
	Sleep 	2.0
	ath wait until loaded 	30

Settings.CS.Verify Schedule Client Page Displayed
	ath check label 	Schedule client view [on/off]
	Check Label Existence	Client will only see open times,Client can view provider calendar 
	ath check button existence 	Apply


Settings.AccountSettings.Select SubMenu
	[Arguments]	${submenu}
#	ath click link 	//a[contains(text(),'Account Settings')]/../descendant::a[contains(text(),'Backgrounds')]
	ath click link	${submenu}


Settings.AS.AcctInfo.Verify Account Information Label Display
	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td/b[contains(text(),'Name')]
	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td/b[contains(text(),'Email')]
	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td/b[contains(text(),'Date Joined')]
	${status}	Run Keyword and Return Status 	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td/b[contains(text(),'Provider Profile')]
	Run Keyword Unless 	${status}	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td/b[contains(text(),'Group Therapist Profile')]
	Capture Page Screenshot

Settings.AS.AcctInfo.Verify Account Information Details Is Displayed
	[Arguments]	${name}	${email} 	${dateJoined}
	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td[contains(text(),'${name}')]
	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td[contains(text(),'${email}')]
	ath verify element is visible	//*[@id="therapistInfo"]/descendant::td[contains(text(),'${dateJoined}')]
	Capture Page Screenshot

Settings.AS.AcctInfo.Verify Cancel Your Account button displayed
	ath check button existence 	Cancel Your Account


Settings.AS.AcctInfo.Verify Contact Us button displayed
	ath check button existence 	Contact Us


Settings.AS.AcctInfo.Click Contact Us button
	ath click button	Contact Us


Settings.AS.AcctInfo.Contact Us Page Displayed
	${status}	Run Keyword and Return Status	Location Should Be	https://automation.adaptivetelehealth.com/index.php/prospect/contactus
	Run Keyword Unless 	${status}	Location Should Be	https://groups1.secure.adaptivetelehealth.com/index.php/prospect/contactus
	Capture Page Screenshot
	Go Back
	Sleep 	10.0
	ath Wait Until Loaded	30

Settings.AS.AcctInfo.Click Cancel Your Account button
	ath click button	Cancel Your Account


Settings.AS.AcctInfo.CancelAccount.Select Cancel Action
	[Arguments]	${isConfirm}=No
	ath click button	//div[@id='are_you_sure_message']/descendant::button[contains(normalize-space(),'${isConfirm}')]

Settings.AS.CustomBackground.Verify Background Page Display
	ath check label 	Custom Backgrounds
	ath verify element is visible	//div[@id='custom_background_box']
	ath check label 	Select background image
	ath check button existence 	Save
	Capture Page Screenshot

Settings.AS.EditPublicProfile.Verify Profile Page Display
	ath check label	Edit Public Profile
	ath check button existence 	Edit
	Capture Page Screenshot

Settings.AS.EditPublicProfile.Click Edit Button
	ath click button 	Edit
	ath wait until loaded 	30
	Capture Page Screenshot

Settings.AS.EditPublicProfile.Verify Checkbox State
	[Arguments]	${chkboxLabel}	${state}=true
	ath_verify_checkbox_value	xpath=(//label[contains(text(),'${chkboxLabel}')]/div/input)[1]	${state}
	Capture Page Screenshot


Settings.AS.LogoSettings.Verify Logo Settings Page Display
	Check Label Existence	Logo Settings,Select Logo
	ath check button existence 	Upload Logo
	Check Label Existence	Preferred Size 202px,Not bigger than302px
	ath verify element is visible	//input[@id='logo']
	Capture Page Screenshot

Settings.AS.MerchantServices.Verify Merchant Services Page Display
	Check Label Existence	Merchant Services,Current Status:,Select Merchant,MerchantID
	ath check button existence 	Turn Off
	ath check button existence	Turn On
	ath check button existence	Save
	Capture Page Screenshot

Settings.AS.Signature.Verify Signature/Clinician Page Display
	ath check label 	Clinician
	ath verify element is visible 	//form[@id='systempreferences_signature']
	ath verify element is visible 	//img[@id='dd_tool_erasor']
	ath verify element is visible 	//div[contains(text(),'Save Signature')]
	Capture Page Screenshot

Settings.AS.Timezone.Verify Timezone Page Display
	ath check label 	Timezone
	ath verify element is visible 	//select[@id='user_timezone']
	ath check button existence	Save
	Capture Page Screenshot

Settings.AS.ServicesAdmin.Verify Services Admin Page Display
	Check Label Existence	Services,Packages
	ath check button existence 	Add Package
	ath check button existence	Add Service
	ath check button existence 	Archive
	ath check button existence	Edit
	Capture Page Screenshot

Settings.SP.InviteUsers.Verify InviteUsers Page Display
	ath check label 	Invite Users
	ath check button existence 	Invite a new Guest
	ath check button existence 	Invite Client
	Capture Page Screenshot

Settings.SP.ConsentForm.Verify ConsentForm Page Display
	Check Label Existence	Consent Form Title,Consent Form Body
	ath check button existence	Update Consent Form
	ath check button existence	Preview Consent Form
	Capture Page Screenshot

Settings.SP.ConsentForm.Input Consent Form Title
	[Arguments]	${consent}
	ath input text value	Consent Form Title	${consent}


Settings.SP.ConsentForm.Click Update Consent Form Button
	ath click button	Update Consent Form
	Capture Page Screenshot

Settings.SP.ConsentForm.Click Preview Consent Form Button
	ath click button	Preview Consent Form
	Capture Page Screenshot

Settings.SP.ConsentForm.Verify Display Consent Form Popup
	ath verify element is visible	//*[@class="box registconsent"]
	Capture Page Screenshot

Settings.SP.ConsentForm.Close Preview Popup
	ath click icon	//div[contains(@id,'preview_modal')]//span[contains(text(),'Ã—')]
	ath wait until loaded 	30

Settings.SP.Schedule.Verify Schedule Page Display
	ath verify element is visible	//select[@id='therapist_time_zone_list']
	ath verify element is visible 	//input[@id='different-timezone-apply']
	Capture Page Screenshot

Settings.SP.GroupsAndProgram.Verify GroupsAndProgram Page Display
	Check Label Existence	Groups and Programs,Groups,Members
	ath verify element is visible 	//select[contains(@name,'DataTables_Table')]
	ath verify element is visible 	//div[contains(@id,'DataTables_Table')]//input
	Capture Page Screenshot


Settings.SP.Password.Input New Password Value
	[Arguments]	${newpwd}
	ath input text value	New Password 	${newpwd}

Settings.SP.Password.Input Confirm Password Value
	[Arguments]	${confpwd}
	ath input text value	Confirm Password 	${confpwd}

Settings.SP.Password.Click Unmask New Password Input
#	ath click icon 	xpath=//*[text()="New Password"]/../descendant::span[@id="unmask"]/i
	Execute Javascript	var element = document.evaluate("//*[text()='New Password']/../descendant::span[@id='unmask']/i" ,document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null ).singleNodeValue;if (element != null) {element.click();}
	ath verify element is visible 	xpath=//input[@id='password'][@type="text"]
	Capture Page Screenshot

Settings.SP.Password.Click Unmask Confirm Password Input
	ath click icon 	xpath=//*[text()="Confirm Password"]/../descendant::span[@id="unmask"]/i
	ath verify element is visible 	xpath=//input[@id='confirm_password'][@type="text"]
	Capture Page Screenshot


Settings.CS.Status.Verify Header Column Display
	[Arguments]	${column}
	ath verify element Is Visible	//th[text()="${column}"]
	Capture Page Screenshot


Settings.TFF.Verify Clinical Template Page Displayed
	Check Label Existence	Clinical Templates
	Settings.CS.Status.Verify Header Column Display 	Order
	Settings.CS.Status.Verify Header Column Display 	Name
	Settings.CS.Status.Verify Header Column Display 	Draft
	Settings.CS.Status.Verify Header Column Display 	Date Created
	Settings.CS.Status.Verify Header Column Display 	Date Last Update
	Check Link Existence	Previous,Next

Settings.TFF.Verify Referral Form Template Page Displayed
	Check Label Existence	Referral Form Template
	Settings.CS.Status.Verify Header Column Display 	Name
	Settings.CS.Status.Verify Header Column Display 	Draft
	Settings.CS.Status.Verify Header Column Display 	Date Created
	Check Link Existence	Previous,Next


Settings.EPP.Input Company Name
	[Arguments]	${coName}
	ath input text value 	Company name 	${coName}

Settings.EPP.Input NPI
	[Arguments]	${npi}
	ath input text value	NPI	${npi}

Settings.EPP.Input Phone Number
	[Arguments]	${phoneNumber}
	ath input text value	Phone Number	${phoneNumber}

Settings.EPP.Click Save Draft button
	ath click button	 Save Draft
	ath wait until loaded 	30

Settings.EPP.Click Publish button
	ath click button 	Publish
	ath wait until loaded 	30

Settings.EPP.Verify Profile Is Saved Successfully
	Ath Verify Element Is Visible	//*[@class="alert alert-success"][contains(text(),'Your changes have been successfully saved.')]

Settings.LS.Choose Logo File for Upload
	[arguments]	${uploadFile}
	Choose File	xpath=//input[@id='logo'] 	${uploadFile}

Settings.LS.Click Upload Loago Button
	ath click button	xpath=//input[@value="Upload Logo"]
	sleep 	1.0
	ath wait until loaded 	30

Settings.LS.Click Delete Loago Button
	ath click button	Delete Logo
	sleep 	1.0
	ath wait until loaded 	30

Settings.LS.Verify Logo Changed Successfully
	ath verify element is visible 	xpath=//*[@class="alert alert-success"][contains(text(),'Logo Changed')]
	ath verify element is visible 	xpath=(//img[contains(@src,'uploadImages')][contains(@src,'jpg')])[1]

Settings.LS.Verify Logo Deleted Successfully
	ath verify element is visible 	xpath=//*[@class="alert alert-success"][contains(text(),'Logo Deleted')]

Settings.Timezone.Select Cardconnect as Merchant Service
	ath select radio button 	xpath=//input[@value="cardconnect"]/..
	ath wait until loaded 	30

Settings.Timezone.Select Paypal as Merchant Service
	ath select radio button 	xpath=//input[@value="paypal"]/..
	ath wait until loaded 	30

Settings.Timezone.Select Timezone Dropdown
	[arguments]	${timezone}
	ath select drop down field value	Timezone	${timezone}
	sleep 	1.0
	ath wait until loaded 	30

Settings.Timezone.Click Save Button
	ath click button	xpath=//form[@id='systempreferences_timezone']//button[@id='cb_save']
	sleep 	1.0
	ath wait until loaded 	30

Settings.Timezone.Verify Timxezone Changed Successfully
	ath verify element is visible 	xpath=//*[contains(@class,'alert alert-success')][contains(text(),'Timezone successfully modified.')]

Settings.CS.Input Consent Title
	[arguments]	${consentTitle}
	ath input text value 	Informed Consent Form Title 	${consentTitle}

Settings.CS.Input Consent Body
	[arguments]	${consentBody}
	Select Frame 	//iframe[@id='therapist_consent_form_text_ifr']
	ath input text value	xpath=//body[@id='tinymce']/p	${consentBody}
	Unselect Frame

Settings.CS.Preview Consent Input
	ath click button	xpath=//a[@class='btn btn-small btn-info']/i
	ath verify element is visible 	//div[@class='box registconsent']
	Capture Page Screenshot

Settings.CS.Verify Consent Form Detail Is Previewed
	[arguments]	${consentContent}
	${formtext}	get element attribute 	xpath=//div[@class='box registconsent']/descendant::p@textContent
	run Keyword and Continue on Failure	Should be equal	${formtext} 	${consentContent}

Settings.CS.Click Save Button
	ath click button 	xpath=//form[@id='systempreferences_therapist']//input[@class='btn btn-small btn-success']
	Sleep 	1.0
	ath wait until loaded 	30

Settings.CS.Verify Consent Form Is Saved Successfully
	ath verify element is visible 	xpath=//*[contains(@class,'alert alert-success')][contains(text(),'New consent form successfully added.')]

Settings.CS.Verify Consent Form Remaining
	[arguments]	${isNumber}
	ath verify element is visible 	xpath=//div[@class='alert alert-danger'][contains(text(),'Additional consent form(s) remaining: [${isNumber}]')]
	Capture Page Screenshot

Settings.CS.Click Delete Button
	ath click button 	Delete
	Sleep 	1.0
	ath wait until loaded 	30

Settings.IU.Click Invite a New Guest Button
	ath click button 	Invite a new Guest
	ath wait until loaded 	30

Settings.IU.Verify Invite New Guest Page Display
	Check Link Existence 	Export/Print data,Patient Profile,Back to,Cancel
	Check Button Existence 	Invite Guest,Email Preview
	Check Label Existence	First Name,Last Name,Email Address,Provider,Date, Invite a Guest

Settings.IU.Input Guest First Name
	[arguments]	${fname}
	ath input text value 	Guest's First Name 	${fname}

Settings.IU.Input Guest Last Name
	[arguments]	${lname}
	ath input text value 	Guest's Last Name 	${lname}

Settings.IU.Input Guest Email
	[arguments]	${email}
	ath input text value 	Guest's Email Address	${email}

Settings.IU.Click Email Preview Button
	ath click button 	Email Preview
	Sleep 	2.0
	ath wait until loaded 	30

Settings.IU.Click Cancel Button
	ath click button 	Cancel
	ath wait until loaded 	30

Settings.IU.Click Invite Guest Button
	ath click button 	Invite Guest
	Sleep 	1.0
	ath wait until loaded 	30
	Capture Page Screenshot

Settings.IU.InviteGuestPopup.Click Cancel Button
	ath click button 	xpath=(//div[@class='modal-footer']//*[contains(text(),'Cancel')])[1]
	Sleep 	2.0
	ath wait until loaded 	30

Settings.IU.InviteGuestPopup.Click Confirm Button
	ath click button 	xpath=(//div[@class='modal-footer']//*[contains(text(),'Confirm')])[1]
	Sleep 	2.0
	ath wait until loaded 	30

Settings.IU.Verify Guest Successfully Invited Display
	[arguments]	${email}	${isfull}
	ath verify element is visible 	xpath=//div[@class='alert alert-success'][contains(normalize-space(),'An email has been sent to ')]
	ath verify element is visible 	xpath=//div[@class='alert alert-success']/descendant::b[text()="${isfull}"]
	ath verify element is visible 	xpath=//div[@class='alert alert-success'][contains(normalize-space(),'You can now include this person')]
	Check Label Existence 	New Guest,Name,Email,Provider,Date
	ath verify element is visible 	xpath=//table//b[contains(text(),'${isfull}')]
	ath verify element is visible 	xpath=//td[contains(text(),'${email}')]
	Capture Page Screenshot

Settings.IU.Click Back to Client File Link
	ath click link 	Back to

Settings.IU.Click Go Back Here Link
	ath click link 	go back here
	sleep 	1.0
	ath wait until loaded 	30

Settings.IU.Verify Email Address Required
	ath verify element is visible 	xpath=//div[@class='alert alert-danger'][contains(text(),'Invalid email address, ')]
	Capture Page Screenshot

Settings.IU.Verify First Name Required
	ath verify element is visible 	xpath=//div[@class='alert alert-danger'][contains(text(),'Invalid first name, ')]
	Capture Page Screenshot

Settings.IU.Verify Last Name Required
	ath verify element is visible 	xpath=//div[@class='alert alert-danger'][contains(text(),'Invalid last name, ')]
	Capture Page Screenshot


Settings.IU.EmailPreviewPopup.Verify First Name
	[arguments]	${fname}
	${isFirst}	Get element Attribute 	xpath=//*[@class="message_text"]/descendant::span[@id="first_name_modal"]@textContent
	Run Keyword and Continue on Failure 	Should Match	${isFirst} 	${fname}

Settings.IU.EmailPreviewPopup.Verify Last Name
	[arguments]	${lname}
	${isLast}	Get element Attribute 	xpath=//*[@class="message_text"]/descendant::span[@id="last_name_modal"]@textContent
	Run Keyword and Continue on Failure 	Should Match	${isLast} 	${lname}

Settings.IU.InviteClient.EmailPreviewPopup.Verify Invite Message
	[arguments]	${message}
	${isFirst}	Get element Attribute 	xpath=(//*[@class="message_text"]/p)[1]@textContent
	Run Keyword and Continue on Failure 	Should Match	${isFirst} 	${message}
	Capture Page Screenshot

Settings.IU.InviteClient.EmailPreviewPopup.Verify Email Recipient
	[arguments]	${email}
	${isemail}	Get element Attribute 	xpath=//div[@id='modal_mail_to']@textContent
	Run Keyword and Continue on Failure 	Should Match	${isemail} 	${email}

Settings.IU.InviteClient.Verify Email Required
	ath verify element is visible 	xpath=//p[@id='inviteClientAlert_modal_error_message'][contains(text(),'please enter a valid email address')]

Settings.IU.InviteClient.Close Email Warning Popup
	ath click button 	xpath=//div[contains(@id,'inviteClientAlert_modal')]//descendant::button[contains(text(),'Ã—')]

Settings.IU.Mailinator.Verify Email Contents
	[arguments]	${isfull}	${isTherapist}
	Select Frame 	xpath=//iframe[@id='msg_body']
	ath verify element is visible 	xpath=//b[contains(text(),'${isfull}')]
	ath verify element is visible 	xpath=//b[contains(text(),'${isTherapist}')]
	ath verify element is visible 	xpath=//b[contains(text(),'Adaptive Telehealth')]
	Run Keyword if	"${TestEnv}" == "Secure"	Check Link Existence	https://groups1.secure.adaptivetelehealth.com/index.php	ELSE	Check Link Existence	https://automation.adaptivetelehealth.com/index.php
	Unselect Frame

Settings.IU.Click Invite Client Button
	ath click button 	Invite Client
	Sleep 	3.0
	ath wait until loaded 	30

Settings.IU.Verify Consent Form Remaining
	[arguments]	${isNumber}
	ath verify element is visible 	xpath=//div[@class='alert alert-danger'][contains(text(),'Additional consent form(s) remaining: [${isNumber}]')]
	Capture Page Screenshot

Settings.CS.Schedule.Click Apply Button
	ath click button 	Apply
	Sleep 	3.0
	ath wait until loaded 	30
	Capture Page Screenshot

Settings.CS.Schedule.Set Provider Checkbox
	ath set checkbox 	can view provider calendar
	ath wait until loaded 	30

Settings.CS.Schedule.Verify View is Saved Successfully
	ath verify element is visible 	xpath=(//div[@class='alert alert-success'][contains(text(),'Saved')])[1]
	Capture Page Screenshot

Settings.TFF.Click Create New Template Button
	ath click button 	Create New
	Sleep 	10.0
	ath wait until loaded 	30
	Capture Page Screenshot

Settings.TFF.Select Colors Selection Input
	ath click icon 	//*[contains(@class,'toolbar-btn')][text()="Colors"]
	ath wait until loaded 	30

Settings.TFF.Verify Colors Selection Widget Displayed
	ath verify element is visible 	//div[@id='cfgenwp-genericstyle-container']
	Check label existence 	Labels,Inputs,Paragraphs,Titles
	Capture Page Screenshot

Settings.TFF.Select Inputs Selection Input
	ath click icon 	//*[contains(@class,'toolbar-btn')][text()="Inputs"]
	ath wait until loaded 	30

Settings.TFF.Select Clear Template Action
	ath click button	xpath=//*[contains(@class,'toolbar-btn')][text()="Clear"]
	ath verify element is visible 	xpath=//div[@id='cfgenwp-dialog-message']/p[contains(text(),'Are you sure you want clear this form')]
	Capture Page Screenshot

Settings.TFF.Select Created Template
	[arguments]	${tempname}
	ath click icon 	xpath=//select[@id='allTemplatesSelect']
	ath click icon 	xpath=(//select[@id='allTemplatesSelect']/optgroup/option[contains(text(),'${tempname}')])[1]
	Capture Page Screenshot
	Sleep 	5.0
	ath wait until loaded 	30


Settings.TFF.ClearTemplatePopup.Click Delete All items button
	ath click button 	xpath=//span[contains(text(),'Delete all items')]
	ath wait until loaded 	30
	Capture Page Screenshot

Settings.TFF.ClearTemplatePopup.Click Cancel button
	ath click button 	xpath=//span[contains(text(),'Cancel')]
	ath wait until loaded 	30

Settings.TFF.Close Selection Input
	ath click button 	//div[@id='cfgenwp-genericstyle-close']
	ath wait until loaded 	30

Settings.TFF.Input New Template Name
	[arguments]	${tempname}
	Clear element Text 	xpath=//input[@id='cfgenwp-config-form-name']
	ath input text value 	xpath=//input[@id='cfgenwp-config-form-name']	${tempname}
	ath wait until loaded 	30

Settings.TFF.Click Save Template Button
	ath click button	//div[@id='cfgenwp-fb-editor-c']/span[@id='cfgenwp-saveform']
	Sleep 	5.0
	ath wait until loaded 	30

Settings.TFF.Click Copy Template Button
	ath click button	//span[@id='copyTemplateBtn']
	Sleep 	5.0
	ath wait until loaded 	30

Settings.TFF.Verify Template is Saved Successfully
	ath verify element is visible 	xpath=(//div[@class='alert alert-success'][contains(text(),'Template has been saved successfully.')])[1]
	Capture Page Screenshot


Settings.TFF.Verify Template Element Exists
	[arguments]	${tempElem}
	@{iselement}	Split String	${tempElem}	,
	:FOR	${elemval}	IN	@{iselement}
	\	@{elem}	Split String	${elemval}	separator=,
	\	log	${elemval}
	\	ath verify element is visible	xpath=(//*[contains(@class,'cfgenwp-addelement')][normalize-space()="${elemval}"])
	\	Capture Page Screenshot


Settings.TFF.Verify Template Checkbox Exists
	[arguments]	${tempElem}
	@{iselement}	Split String	${tempElem}	,
	:FOR	${elemval}	IN	@{iselement}
	\	@{elem}	Split String	${elemval}	separator=,
	\	log	${elemval}
	\	ath verify element is visible	xpath=(//div[text()=" ${elemval}"]/input[@type="checkbox"])[1]
	Capture Page Screenshot

Settings.TFF.Select Records per Page
	[Arguments]	${RecordNo}
	ath select drop down field value	//label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60

Settings.TFF.Input Search Criteria
	[Arguments]	${SearchCriteria}
	ath input text value	xpath=(//*[contains(text(),"Search")]/input)[1]	${SearchCriteria}

Settings.TFF.Sort Order Column
	${orderlist}	Create List
	${orderlist1}	Create List

	ath click icon	(//th[contains(@class,'sorting')][normalize-space()="Order"])[1]
	${count}	Get Matching Xpath Count	//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1]
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx}	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${orderlist}	${text}
	Sort List	${orderlist}
	Log	${orderlist}

	ath click icon	(//th[contains(@class,'sorting')][normalize-space()="Order"])[1]
	${count}	Get Matching Xpath Count	//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1]
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${orderlist1}	${text}
	Sort List	${orderlist1}
	Log	${orderlist1}

	List Should Contain Sub List	${orderlist1}	${orderlist}

Settings.TFF.Sort Date Created Column
	${datelist}	Create List
	${datelist1}	Create List

	ath click icon	(//th[contains(@class,'sorting')][normalize-space()="Date Created"])[1]
	${count}	Get Matching Xpath Count	//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[4]
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx}	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]@textContent
	\	${strLog}	Strip String 	${text} 	characters=\t
	\	${strLog1}	Strip String 	${strLog}	characters=\n
	\	Log	${strLog1}
	\	Append To List	${datelist1}	${strLog1}
	Sort List	${datelist}
	Log	${datelist}

	ath click icon	(//th[contains(@class,'sorting')][normalize-space()="Date Created"])[1]
	${count}	Get Matching Xpath Count	//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[4]
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*[@id='formBoxes']/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]@textContent
	\	${strLog}	Strip String 	${text} 	characters=\t
	\	${strLog1}	Strip String 	${strLog}	characters=\n
	\	Log	${strLog1}
	\	Append To List	${datelist1}	${strLog1}
	Sort List	${datelist1}
	Log	${datelist1}

	List Should Contain Sub List	${datelist1}	${datelist}