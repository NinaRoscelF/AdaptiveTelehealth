*** Settings ***
Resource	C:/Ath.Git/AdaptiveTelehealth/ATH-Resources/Flows/CommonPage_res.txt


**** Keywords ****

Complete registration Process
	[Arguments]	${FirstName}	${LastName}	${Email}
	Dashboard.NewUser.Input First Name	${FirstName}
	Dashboard.NewUser.Input Last Name	${LastName}
	Dashboard.NewUser.Input Password	Password123!!!
	Dashboard.NewUser.Input Confirm Password	Password123!!!
	Dashboard.NewUser.Input Confirm Email	${Email}
	Run Keyword and Ignore Error	Dashboard.Registration.Select I agree checkboxes
	# ${vPos}	Get Vertical Position	xpath=//canvas[@id='dd_canvas']
	# ${vPos}	Get horizontal Position	xpath=//canvas[@id='dd_canvas']
	# Run keyword and ignore error	mouse_down_at	xpath=//canvas[@id='dd_canvas'] 	${vPos}	${vPos}
	# Run keyword and ignore error	mouse_down_at	xpath=//canvas[@id='dd_canvas'] 	0px	150px
	# Run keyword and ignore error	mouse_down_at	xpath=//canvas[@id='dd_canvas'] 	150px	0px
	Capture Page Screenshot
	ath click button	xpath=//input[@id='registration_form_submit_btn']
	Capture Page Screenshot

Dashboard.Registration.Select I agree checkboxes
	ath_set_checkbox	xpath=(//*[contains(text(),'Yes, I agree')])[1]/following::input[1]
	Execute Javascript	var element = document.evaluate("(//*[contains(text(),'Yes, I agree')])[2]/following::input[1]" ,document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null ).singleNodeValue;if (element != null) {element.click();}

# Dashboard.Registration.Input Password
# 	[Arguments]	${Password}
# 	ath input text value	Password	${Password}

# Dashboard.Registration.Input Confirm Password
# 	[Arguments]	${Password}
# 	ath input text value	Confirm Password	${Password}
Dashboard.GroupsCompanyWidget.Input Search Criteria
	[Arguments]	${SearchCriteria}
	ath input text value	Search	${SearchCriteria}


Dashboard.GroupsCompanyWidget.Verify No Results found
	Ath Verify Element Is Visible	xpath=//td[@class='dataTables_empty']
	Capture Page Screenshot

Dashboard.Confirm Create Client File Button
	[Arguments]	${Confirm}=No
	ath click button	xpath=//*[contains(normalize-space(),'Have you already invited')]/ancestor::div[@class="modal-dialog"]/descendant::span[contains(normalize-space(),'${Confirm}')]
	Sleep 	1.0
	ath wait until loaded 	30

Dashboard.Click Create Client Button
	ath click button	//button[contains(text(),'Create Client')]


Dashboard.Click Invite Client Button
	ath click button	//a[@id='button_client']


Dashboard.Click New Therapist Button
	ath click button	xpath=//span[contains(text(),'New Therapist')]
	Sleep 	2.0
	ath_wait_until_element_is_present	xpath=//h4[contains(text(),'New Therapist')] 	160


Dashboard.Click New Supervisor Button
	ath click button	xpath=//span[contains(text(),'New Supervisor')]
	Sleep 	5.0
	ath_wait_until_element_is_present	xpath=//h4[contains(text(),'New Supervisor')]	60


Dashboard.Click New Admin Button
	ath click button	xpath=//span[contains(text(),'New Admin (Or Biller)')]
	Sleep 	5.0
	ath_wait_until_element_is_present	xpath=//h4[contains(text(),'New Supervisor')]	60


Dashboard.NewClient.Input Client First Name
	[Arguments]	${FirstName}
	ath input text value	Client First Name	${FirstName}


Dashboard.NewClient.Input Client Last Name
	[Arguments]	${LastName}
	ath input text value	//input[@id='client_last_name']	${LastName}

Dashboard.NewUser.Select Client Gender
	[Arguments]	${Gender}
	ath select drop down field value	Client Gender	${Gender}

Dashboard.NewClient.Click Create Client File Button
	ath click button	Create Client File
	Sleep 	2.0
	ath wait until loaded 	30

Messaging.Verify Client File Created
	Ath Verify Element Is Visible	//*[contains(@class,'alert-success')]/a[contains(text(),'Adaptive TeleHealth Client File created')]


Dashboard.NewClient.Input Group Company Email
	[Arguments]	${Email}
	ath input text value	Enter Groups Company's Email Address	${Email}

Dashboard.NewClient.Input Client Email
	[Arguments]	${Email}
	ath input text value	Enter Client's Email Address	${Email}


Dashboard.NewClient.Click Invite Groups Company Button
	ath click button 	Invite Groups Company
	Sleep 	3.0

Dashboard.NewClient.Click Invite Client Button
	ath click button 	Invite Client
	Sleep 	3.0

Dashboard.Click back to Dashboard link
	ath click link	xpath=//a[contains(text(),'Back to Dashboard')]
	Sleep 	3.0


Dashboard.NewClient.Verify Client is Invited
	[Arguments]	${Email}
	ath verify element is visible	xpath=//*[text()="Successfully Sent"]
	Run Keyword if 	"${TestEnv}" == "Secure"	ath verify element is visible	xpath=//*[text()="Groups Company's email:"]	ELSE	ath verify element is visible	xpath=//*[text()="Client's email:"]
	ath verify element is visible	xpath=//*[normalize-space()="${Email}"]
	Capture Page Screenshot

Dashboard.NewClient.Click Login to Platform
	ath click link	//a[text()="login to the platform here"]
	Sleep 	2.0
	ath wait until element is present	//h3[@class="box-title"][normalize-space()="Login"]


Dashboard.NewUser.Enter New Password
	[Arguments]	${NewPwd}
	ath input text value	Enter new password	${NewPwd}


Dashboard.NewUser.Click Update Password Button
	ath click button 	Update Password
	Sleep 	5.0
	ath wait until loaded 	30

Dashboard.NewUser.Input First Name
	[Arguments]	${FirstName}
	ath input text value	First Name	${FirstName}

Dashboard.NewUser.Input Last Name
	[Arguments]	${LastName}
	ath input text value	Last Name	${LastName}

Dashboard.NewUser.Input Password
	[Arguments]	${Password}
	ath input text value	Password	${Password}

Dashboard.NewUser.Input Confirm Password
	[Arguments]	${confpwd}
	ath input text value	Confirm Password	${confpwd}

Dashboard.NewUser.Input Confirm Email
	[Arguments]	${Email}
	ath input text value	Confirm Email	${Email}

Dashboard.NewUser.Input City
	[Arguments]	${City}
	ath input text value	City	Hollywood

Dashboard.NewUser.Input Address
	[Arguments]	${Address}
	ath input text value	Address	${Address}

Dashboard.NewUser.Input Zip
	[Arguments]	${zipCode}
	ath input text value	Zip	${zipCode}

Dashboard.NewUser.Input Email
	[Arguments]	${Email}
	ath input text value	xpath=(//label[text()="Email:"]/../following-sibling::div/input)[1]	${Email}

Dashboard.NewUser.Input NPI
	[Arguments]	${NPI}
	ath input text value	NPI	${NPI}

Dashboard.NewUser.Input Registration Code
	[Arguments]	${RegCode}
	ath input text value	xpath=(//label[text()="Registration Code:"]/../following-sibling::div/input)[1]	${RegCode}

Dashboard.NewUser.Select Supervisor
	[Arguments]	${Supervisor}
	ath select drop down field value	Assign Supervisor	${Supervisor}

Dashboard.NewUser.Select Gender
	[Arguments]	${Gender}
	ath select drop down field value	Gender	${Gender}


Dashboard.NewUser.Input Phone Number1
	[Arguments]	${PhoneNumber1}
	ath input text value	Phone Number1:	${PhoneNumber1}

Dashboard.NewUser.Select I agree checkboxes
	ath_set_checkbox	xpath=(//*[contains(text(),'Yes, I agree')])[1]/../descendant::ins
	ath_set_checkbox	xpath=(//*[contains(text(),'Yes, I agree')])[2]/../descendant::ins

Dashboard.NewUser.Input Full Name
	[Arguments]	${FullName}
	ath input text value	Full Name	${FullName}

Dashboard.NewUser.AgreementsPage.Input Full Name as Digital Signature
	[Arguments]	${FullName}
	ath input text value	Enter your full name as digital signature	${FullName}

Dashboard.NewUser.AgreementsPage.Input TimeZone
	[Arguments]	${IsTimezone}
	Ath select drop down field value	xpath=//select[@id='user_timezone']	${IsTimezone}

Dashboard.NewUser.AgreementsPage.Click Submit Button
	ath click button	Submit
	Sleep 	5.0
	Ath Wait Until Loaded	30

Dashboard.NewUser.Click OK button
	ath click button	Ok
	Ath wait until loaded 	30

Dashboard.NewUser.Click Set User Function button
	ath click button	Set User Functions Access

Dashboard.NewUser.Select Check/Uncheck All checkbox
	ath set checkbox 	Check/Uncheck All	true

Dashboard.NewUser.SetUserFunction.Click Save Button
	ath click button 	Save

Dashboard.NewUser.Click Add New Therapist Button
	ath click button 	xpath=(//input[@value="Add new therapist"])
	Sleep 	5.0
	ath wait until loaded 	30

Dashboard.NewUser.Click Add New Supervisor Button
	ath click button 	xpath=(//input[@value="Add new supervisor"])
	Sleep 	5.0
	ath wait until loaded 	30

Dashboard.NewUser.Click Add New User Button
	ath click button 	xpath=(//input[@value="Add new user"])
	Sleep 	5.0
	ath wait until loaded 	30

Dashboard.NewUser.Is Read Only Supervisor
	[Arguments]	${ReadOnly}
	ath select drop down field value	Read Only Supervisor?	${ReadOnly}

Dashboard.NewUser.Is Super Care Coordinator
	[Arguments]	${SuperCare}
	ath select drop down field value	Super Care Coordinator?	${SuperCare}

Dashboard.NewUser.Is Biller Role
	[Arguments]	${BillerRole}
	ath select drop down field value	Biller Role?	${BillerRole}

Dashboard.NewUser.AssignSupervisor to Admin
	[Arguments]	${Supervisor}
	ath select drop down field value	//*[@id="addNewAdmin"]/descendant::select[@name="supervisor"]	${Supervisor}

Dashboard.NewUser.Verify Supervisor Is saved successfully
	ath verify element is visible	xpath=//*[contains(text(),'Supervisor added and email sent.')]
	# ' Warning: Failed adding Zoom user. Zoom error: Email domain is blocked"]
	# Supervisor added and email sent. Warning: Failed adding Zoom user. Zoom error: Cannot add the following user at this time. Contact 

Dashboard.NewUser.Verify User Is saved successfully
	ath verify element is visible	xpath=//*[contains(text(),'User added and email sent.')]


Dashboard.NewUser.Verify Therapist saved successfully
	ath verify element is visible	xpath=//*[contains(@class,'alert-success')][text()="Therapist added and email sent."]
	ath verify element is visible	xpath=//*[text()="Therapist successfully assigned to Supervisor."]


Dashboard.ClientsWidget.Select Records per Page Value
	[Arguments]	${RecordNo}
	ath select drop down field value	//div[@id='therapist_clients_wrapper']/descendant::label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60

Dashboard.InvitationsWidget.Select Records per Page Value
	[Arguments]	${RecordNo}
	ath select drop down field value	//div[@id='Invitations_wrapper']/descendant::label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60

Dashboard.ProvidersWidget.Select Records per Page Value
	[Arguments]	${RecordNo}
	ath select drop down field value	//div[@id='providers_list']/descendant::label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60

Dashboard.CareCoordinatorsWidget.Select Records per Page Value
	[Arguments]	${RecordNo}
	ath select drop down field value	//div[@id='carecoordinators_list']/descendant::label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60

Dashboard.AdminsWidget.Select Records per Page Value
	[Arguments]	${RecordNo}
	ath select drop down field value	//div[@id='admins_list']/descendant::label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60


Dashboard.ClientsWidget.Verify Newly Created Client Is Displayed
	[Arguments]	${FirstName}
	ath verify element is visible	xpath=//div[@id='Invitations_wrapper']/descendant::tbody/tr/td[contains(text(),'${FirstName}')]

Dashboard.ClientsWidget.TherapistRole.Verify Newly Created Client Is Displayed
	[Arguments]	${FirstName}
	ath verify element is visible	xpath=//section[@class='section clients']/descendant::tbody/tr/td/a[contains(text(),'${FirstName}')]


Dashboard.ClientsWidget.Select Newly Created Client
	[Arguments]	${FirstName}
	Capture Page Screenshot
	ath click link	xpath=//section[@class='section clients']/descendant::tbody/tr/td/a[contains(text(),'${FirstName}')]


Dashboard.ProvidersWidget.Select Newly Created Provider
	[Arguments]	${FirstName}
	ath verify element is visible	xpath=//div[@id='providers_list']/descendant::tbody/tr/td/a[contains(text(),'${FirstName}')]
	Capture Page Screenshot
	ath click link	xpath=//div[@id='providers_list']/descendant::tbody/tr/td/a[contains(text(),'${FirstName}')]

Dashboard.ProvidersWidget.Select Newly Created Care Coordinators
	[Arguments]	${FirstName}
	ath verify element is visible	xpath=//div[@id='carecoordinators_list']/descendant::tbody/tr/td/a[contains(text(),'${FirstName} Automation')]
	ath click link	xpath=//div[@id='carecoordinators_list']/descendant::tbody/tr/td/a[contains(text(),'${FirstName} Automation')]

Dashboard.AdminsWidget.Select Newly Created Admin
	[Arguments]	${FirstName}
	ath verify element is visible	xpath=//div[@id='admins_list']/descendant::tbody/tr/td/a[contains(text(),'${FirstName} Automation')]
	ath click link	xpath=//div[@id='admins_list']/descendant::tbody/tr/td/a[contains(text(),'${FirstName} Automation')]

Dashboard.NewUser.Click Update Client Information link
	ath click link	xpath=//a[contains(text(),"information here")]
	Sleep 	3.0
	ath wait until loaded 	60

Dashboard.NewUser.ClientInfo.Input Email address
	[Arguments]	${Email}
	ath input text value	//input[@id='email']	${Email}

Dashboard.NewUser.ClientInfo.Click Invite Button
	ath click button	//span[@id='sendInvite']

Dashboard.NewUser.Verify Is Assigned to Supervisor
	[Arguments]	${Supervisor}
	ath verify element is visible	xpath=//p[contains(normalize-space(),'${Supervisor}')]

Dashboard.NewUser.Verify Supervisor Profile is Created
	ath verify element is visible	xpath=//h1[contains(text(),'Supervisor Profile')]
	ath check button existence	Update Supervisor Data


Dashboard.NewUser.Verify Admin Data Displayed
	[Arguments]	${FirstName}
	ath verify element is visible	xpath=//h1[contains(text(),'${FirstName}')]
	ath check button existence	Create Chat Credentials


Dashboard.NewUser.Verify Supervisor Assigned to Admin
	[Arguments]	${Supervisor}
	ath verify element is visible	xpath=//p[contains(normalize-space(),'${Supervisor}')]
	ath check links displayed	//a[text()="Deassign"]
	ath check button existence	Update Admin Data


Dashboard.NewUser.ClientInfo.Select Client Status
	[Arguments]	${status}
	ath select drop down field value	//select[@name='status']	${status}


Dashboard.NewUser.ClientInfo.Click Update Client Status
	ath click button	Update Client Status
	Sleep 	3.0
	ath wait until loaded 	60


Dashboard.Select 3rd Column Display
	[Arguments]	${column}
	ath select drop down field value	//select[@name='option4']	${column}
	Sleep 	3.0
	ath wait until loaded 	60

Dashboard.Select 5th Column Display
	[Arguments]	${column}
	ath select drop down field value	//select[@name='option6']	${column}
	Sleep 	3.0
	ath wait until loaded 	60


Dashboard.Verify Header Column Display Applied
	[Arguments]	${column}
	ath verify element Is Visible	//th[text()="${column}"]
	Capture Page Screenshot


Dashboard.ClientWidget.Sort First Name Column
	${datelist}	Create List
	${datelist1}	Create List

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="First Name"]
	${count}	Get Matching Xpath Count	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx}	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist}	${text}
	Sort List	${datelist}
	Log	${datelist}

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="First Name"]
	${count}	Get Matching Xpath Count	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist1}	${text}
	Sort List	${datelist1}
	Log	${datelist1}

	List Should Contain Sub List	${datelist1}	${datelist}

Dashboard.ClientWidget.Sort Last Name Column
	${datelist}	Create List
	${datelist1}	Create List
	ath click icon	//th[contains(@class,'sorting')][normalize-space()="Last Name"]
	${count}	Get Matching Xpath Count	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist}	${text}
	Sort List	${datelist}
	Log	${datelist}

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="Last Name"]
	${count}	Get Matching Xpath Count	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//*/descendant::tr[not(contains(@role,'row'))]/descendant::td[4])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist1}	${text}
	Sort List	${datelist1}
	Log	${datelist1}

	List Should Contain Sub List	${datelist1}	${datelist}


Dashboard.ClientProfile.Verify Client Details Displayed
	ath verify element is visible 	//div[@class='content pp_inner_width content_container']


Dashboard.ClientProfile.Verify Client Label Display
	[Arguments]	${label}
	ath verify element is visible	//h3/descendant::a[contains(normalize-space(),'${label}')]


Dashboard.ClientProfile.Verify NPI Detail
	[Arguments]	${npiDetail}
	ath_verify_textbox_value 	xpath=(//*[contains(text(),"NPI")]/following-sibling::input)[1]	${npiDetail}


Dashboard.ClientProfile.Verify Column Headers
	[Arguments]	${label}
	@{col}	Split String	${label} 	separator=,
	:FOR 	IN RANGE 	0	${col}
		

Dashboard.MeetingWidget.Verify Meeting Is Displayed
	[Arguments]	${time}	${date}
	ath verify element is visible	xpath=//*[@class="jcarousel"]/descendant::li/span[contains(normalize-space(),'${time}')][text()="${date}"]


Dashboard.MeetingWidget.Verify Online Meeting Button Is Displayed
	[Arguments]	${date}
	ath verify element is visible	xpath=//div[@class="mtype"]/button[contains(@data-meetings,'${date}')]

Dashboard.MeetingWidget.Verify InPerson Meeting Detail Is Displayed
	[Arguments]	${date}
	ath verify element is visible	xpath=//span[contains(text(),'${date}')]/../div[@class="mtype"]/span[text()="In-Person"]

Dashboard.MeetingWidget.Click Online Meeting button
	[Arguments]	${date}
	ath click button	xpath=//div[@class="mtype"]/button[contains(@data-meetings,'${date}')]

Dashboard.MeetingWidget.Click Participant Name
	[Arguments]	${ptcpntName}
	ath click button	xpath=//a[@class='show-meetings'][text()="${ptcpntName}"]

Dashboard.MeetingPopupDetails.Verify Label Existence
	[Arguments]	${labelList}
	@{col}	Split String	${labelList}	separator=,
	:FOR 	${item}	IN 	@{col}
	\	ath_check_label	${item}

Dashboard.MeetingPopupDetails.Click Start Video Meeting
	ath click link	 Start Video Meeting
	Sleep 	15.0
	Select window	New
	${windows}	Get Window Titles
	Capture Page Screenshot

Dashboard.MeetingPopupDetails.Click Edit button
	ath click button	//*[@id="meetings_modal"]/descendant::a[text()="Edit"]\
	Sleep 	3.0
	ath wait until loaded 	30


Dashboard.TherapistRole.Verify Notifications Table Header Is Visible
	ath verify element is visible	//h1[@id='dashboard_tour_notification'][contains(text(),'Notifications')]

Dashboard.ClientRole.Verify Alerts Table Header Is Visible
	ath verify element is visible	//*[@id='notification-section']/descendant::h3[contains(text(),'Alerts')]

Dashboard.NotificationsTable.Verify Column Is Visible
	[Arguments]	${columnList}
	@{col}	Split String	${columnList}	separator=,
	:FOR 	${item}	IN 	@{col}
	\	ath verify element is visible	//*[@id="notification-table_wrapper"]/descendant::th[text()="${item}"]


Dashboard.Verify Notifications Mark All as Read Link Is Visible
	ath check links displayed	//th/descendant::a[text()="Mark all as read"]



Dashboard.NotificationsTable.Verify Status Column is Visible
	ath verify element is visible	//table[@id='notification-table']//th[@class='sorting'][contains(text(),'Status')]


Dashboard.Verify Client Meetings Widget Is Displayed
	ath verify element is visible 	//div[@id='pftab_future_meetings']
	ath check label 	My Meetings


Dashboard.ClientMeetingsWidget.Verify Video Meetings Details
	[Arguments]	${date}	${meetingTime}
	ath verify element is visible 	//td[contains(text(),'Video')]
	${status}	Run Keyword and Return Status 	ath verify element is visible 	//td[contains(text(),'Appointment')]
	Run Keyword Unless	${status}	ath verify element is visible 	//td[contains(text(),'Open')]
	ath verify element is visible 	xpath=(//td[contains(text(),'Video')]/following-sibling::*[contains(text(),'${date}')])
	ath verify element is visible 	//span[contains(text(),'${meetingTime}')]
	ath verify element is visible 	//*[@class="fa fa-play"]


Dashboard.ClientMeetingsWidget.Verify InPerson Meetings Details
	[Arguments]	${date}	${meetingTime}
	ath verify element is visible 	//td[contains(text(),'In Person')]
	ath verify element is visible 	//td[contains(text(),'Open')]
	ath verify element is visible 	xpath=(//td[contains(text(),'In Person')]/following-sibling::*[contains(text(),'${date}')])
	ath verify element is visible 	//span[contains(text(),'${meetingTime}')]

Clients.Select Records Per Page Value
	[Arguments]	${RecordNo}
	ath select drop down field value	//div[contains(@id,'DataTables')]/descendant::label[text()="Records per page "]/select	${RecordNo}
	Sleep 	3.0
	ath wait until loaded 	60

Clients.Verify Record Per Page Dropdown Is Visible
	ath verify element is visible 	xpath=//div[contains(@id,'DataTables')]/descendant::label[text()="Records per page "]

Clients.Verify Search Input Is Visible
	ath verify element is visible 	xpath=//label[contains(text(),'Search')]/input

Clients.Verify Group Company Link Is Visible
	Check Link Existence	Groups Company Archive


Clients.Sort Last Name Column
	${datelist}	Create List
	${datelist1}	Create List

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="Last Name"]
	${count}	Get Matching Xpath Count	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[2])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx}	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[2])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[2])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist}	${text}
	Sort List	${datelist}
	Log	${datelist}

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="Last Name"]
	${count}	Get Matching Xpath Count	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[2])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[2])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[2])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist1}	${text}
	Sort List	${datelist1}
	Log	${datelist1}

	List Should Contain Sub List	${datelist1}	${datelist}


Clients.Sort First Name Column
	${datelist}	Create List
	${datelist1}	Create List

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="First Name"]
	${count}	Get Matching Xpath Count	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx}	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist}	${text}
	Sort List	${datelist}
	Log	${datelist}

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="First Name"]
	${count}	Get Matching Xpath Count	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[1])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist1}	${text}
	Sort List	${datelist1}
	Log	${datelist1}

	List Should Contain Sub List	${datelist1}	${datelist}


Clients.Sort Last Login Column
	${datelist}	Create List
	${datelist1}	Create List

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="Last Login"]
	${count}	Get Matching Xpath Count	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx}	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist}	${text}
	Sort List	${datelist}
	Log	${datelist}

	ath click icon	//th[contains(@class,'sorting')][normalize-space()="Last Login"]
	${count}	Get Matching Xpath Count	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])
	:FOR	${index}	IN RANGE	0	${count}
	\	${idx} 	Evaluate	${index} + 1
	\	ath_wait_until_element_staleness	(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]
	\	${text}	Get Element Attribute	xpath=(//table[@id='client_archive']/descendant::tr[not(contains(@role,'row'))]/descendant::td[3])[${idx}]@textContent
	\	Log	${text}
	\	Append To List	${datelist1}	${text}
	Sort List	${datelist1}
	Log	${datelist1}

	List Should Contain Sub List	${datelist1}	${datelist}
